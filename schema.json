{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "SDMP Schema",
  "description": "The authoritative schema for the SDMP.",
  "type": "object",
  "properties": {


    "sdmp": {
      "description": "Root property distinguishing the YAML file as an SDMP resource.",
      "type": "object",
      "properties": {


        "resource": {
          "description": "Core properties, required on all resources.",
          "type": "object",
          "properties": {
            "version": {
              "description": "Version of SDMP used to create/validate the resource.",
              "$ref": "#/definitions/semver"
            },
            "publisher": {
              "description": "The key fingerprint of the user or node publishing the resource.",
              "$ref": "#/definitions/shaTwoFiftySix"
            },
            "created": {
              "description": "Date this resource was published. Must be in UTC time with granularity to the millis.",
              "$ref": "#/definitions/isoDate"
            },
            "type": {
              "description": "The type of resource this is. Corresponds to the 'data' property.",
              "enum": ["identity", "relationship", "user", "node", "general"]
            },
            "updates": {
              "description": "The resources which this resource overrides.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/shaTwoFiftySix"
              },
              "uniqueItems": true
            }
          },
          "required": ["version", "publisher", "created", "type"]
        },


        "data": {
          "description": "Holds the actual resource data.",
          "type": "object",
          "oneOf": [
            { "$ref": "#/definitions/identity" },
            { "$ref": "#/definitions/relationship" },
            { "$ref": "#/definitions/user" },
            { "$ref": "#/definitions/node" },
            { "$ref": "#/definitions/general" }
          ]
        }


      },
      "required": ["resource", "data"]
    }
  },
  "required": ["sdmp"],
  "definitions": {

    "identity": {
      "description": "Used to create a user or a node.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of identity.",
          "enum": ["user", "node"]
        },
        "expires": {
          "description": "Date when the identity key should be expired.",
          "$ref": "#/definitions/isoDate"
        },
        "key": {
          "description": "Binary data of the public key, encoded to YAML binary.",
          "$ref": "#/definitions/buffer"
        }
      },
      "additionalProperties": false
    },
    "relationship": {
      "description": "Indicates relationship between user and user, and user and node.",
      "type": "object",
      "properties": {
        "type": {
          "description": "For user-to-node, use 'host' or 'publisher', and for user-to-user, 'connection'.",
          "type": { "enum": ["connection", "host", "publisher"] }
        },
        "key": {
          "description": "The key fingerprint of the user or node being added as a relationship.",
          "$ref": "#/definitions/shaTwoFiftySix"
        }
      },
      "additionalProperties": false
    },
    "user": {
      "description": "Stores information about a user.",
      "type": "object",
      "properties": {
        "name": {
          "description": "A human-readable name for the user.",
          "type": "string"
        },
        "about": {
          "description": "A human-readable description of the user. Meant to differentiate between users with similar names.",
          "type": "string"
        }
      },
      "required": ["name"]
    },
    "node": {
      "description": "Used to store information about a node.",
      "type": "object",
      "properties": {
        "name": {
          "description": "A human-readable name for the node.",
          "type": "string"
        },
        "ips": {
          "description": "String representation of node IP address (IPv4 or IPv6) and port.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodeAddress"
          }
        }
      }
    },
    "general": {
      "description": "Any general resource information can be stored here.",
      "type": "object",
      "properties": {
        "schema": {
          "description": "A valid JSON-schema URI, defining additional properties available within the whole resource.",
          "type": "string"
        },
        "encrypted": {
          "description": "Encrypted data is placed inside this property.",
          "type": "object",
          "properties": {
            "keys": {
              "description": "The per-user session key, encrypted to the recipient identity key, and the recipient node identity key.",
              "$ref": "#/definitions/buffer"
            },
            "data": {
              "description": "Secret data, encrypted to session AES key.",
              "$ref": "#/definitions/buffer"
            }
          },
          "required": ["keys", "data"]
        },
        "post": {
          "description": "Markdown formatted plaintext, publically visible content.",
          "type": "string"
        }
      }
    },


    "semver": {
      "description": "Simple regex for semver.org",
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$"
    },
    "shaTwoFiftySix": {
      "description": "The SHA-256 of the public key in lowercase hexadecimal.",
      "type": "string",
      "pattern": "^[a-z0-9]{64}$"
    },
    "isoDate": {
      "description": "The required format for any timestamp.",
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
    },
    "buffer": {
      "description": "In JavaScript, a reasonable way to represent binary data is a Buffer object.",
      "type": "object",
      "properties": {
        "type": {
          "type": { "enum": ["Buffer"] }
        },
        "data": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          }
        }
      },
      "required": ["type", "data"],
      "additionalProperties": false
    },
    "nodeAddress": {
      "description": "IPv4 or IPv6 with port included.",
      "type": "string",
      "pattern": ".*"
    }


  }
}
